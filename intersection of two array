#include <stdio.h>
#include <stdlib.h>

#define OFFSET 10000
#define SIZE 20000

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {
    int* hash = (int*)calloc(SIZE, sizeof(int));
    int* res = (int*)malloc((nums1Size < nums2Size ? nums1Size : nums2Size) * sizeof(int));
    *returnSize = 0;

    for (int i = 0; i < nums1Size; i++) {
        hash[nums1[i] + OFFSET] = 1;
    }

    for (int i = 0; i < nums2Size; i++) {
        if (hash[nums2[i] + OFFSET] == 1) {
            res[(*returnSize)++] = nums2[i];
            hash[nums2[i] + OFFSET] = -1; // avoid duplicates
        }
    }

    free(hash); // free hash to prevent memory leak
    return res;
}
